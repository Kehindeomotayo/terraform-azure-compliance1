name: 'Azure Policy Governance Pipeline'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  pull-requests: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform:
    name: 'Terraform Policy Governance'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check -recursive

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -input=false -out=tfplan

    - name: Policy Compliance Check
      run: |
        cd terraform
    
        echo "Initializing Terraform..."
        terraform init -input=false
    
        echo "Creating binary plan..."
        terraform plan -out=tfplan -input=false
    
        echo "Converting plan to JSON..."
        terraform show -json tfplan > plan.json
    
        echo "Checking policy definitions in JSON..."
        jq -r '
          .planned_values.root_module.resources[]
          | select(.type == "azurerm_policy_definition")
          | .values.name
        ' plan.json


    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd terraform
        terraform apply -auto-approve tfplan

    - name: Policy Compliance Validation
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd terraform
        echo "Validating policy assignments..."
        terraform output -json policy_assignments

    - name: Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'terraform/'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

